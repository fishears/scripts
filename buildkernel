#!/bin/bash
#

#****************************************************************
## Start timer:
START=$(date +%s)

#****************************************************************
## Set basic parameters:
name=FISHEARS-KERNEL
trgt=$1
if [ $2 ]
then
extra=$2'-'
else
extra=''
fi
if [ -z "$trgt" ]
then
  echo "No version specified"
  exit
fi
if [ "$trgt" = "42" ]
then
echo 'Building for Android 4.2'
fldr="datadrive"
ver='-4.2-'
cd ~/$fldr/android/system/kernel/samsung/aries
git checkout cm-10.1
cd ~/$fldr/android/system/device/samsung/aries-common
git checkout cm-10.1
cd ~/$fldr/android/system/vendor/cm
git checkout cm-10.1
fi
if [ "$trgt" = "cm" ]
then
echo 'Building for Android 4.1'
fldr="developer"
ver='-4.1-'
fi
finalout=~/$fldr/android/system/out/target/product/galaxysmtd
androidtop=~/$fldr/android/system
secsign=~/$fldr/android/system/build/target/product/security

#****************************************************************
## Clean build environment:
cd ~/$fldr/android/system
make installclean
rm $finalout/boot.img

#****************************************************************
## Set kernel version in init:
cd ~/$fldr/android/system/kernel/samsung/aries
if [ $2 ]
then
export LOCALVERSION="-FISHEARS-"$2
  if [ "$2" = "LVM" ]
  then
  cd ~/$fldr/android/system/kernel/samsung/aries
  git checkout cm-10.1-LVM
  cd ~/$fldr/android/system/device/samsung/aries-common
  git checkout cm-10.1-LVM
  cd ~/$fldr/android/system/vendor/cm
  git checkout cm-10.1-LVM
  fi
else
export LOCALVERSION="-FISHEARS"
fi
#****************************************************************
## Build the kernel:
cd ~/$fldr/android/system/
. build/envsetup.sh
breakfast galaxysmtd
mka bootimage

#****************************************************************
## Package the kernel:
if [ -e $finalout/boot.img ]
then
  echo "Packaging kernel"
else
  echo "boot.img not found. Aborting"
  exit 0
fi
name=$name$ver$extra$(date +%Y%m%d)
cd $finalout
rm -rf kernel_zip
mkdir -p kernel_zip/system/app
mkdir -p kernel_zip/system/etc/init.d
mkdir -p kernel_zip/system/lib/modules
mkdir -p kernel_zip/system/lib/hw
mkdir -p kernel_zip/META-INF/com/google/android
echo "Copying boot.img ..."
cp boot.img kernel_zip/
cp $finalout/obj/KERNEL_OBJ/arch/arm/boot/zImage kernel_zip/
echo "Copying kernel modules ..."
cp -R system/lib/modules/* kernel_zip/system/lib/modules
cp -R system/lib/hw/lights.aries.so kernel_zip/system/lib/hw
echo "Copying update-binary ..."
cp -R $finalout/obj/EXECUTABLES/updater_intermediates/updater kernel_zip/META-INF/com/google/android/update-binary
cp -R ~/datadrive/scripts/updater-script kernel_zip/META-INF/com/google/android
echo "Copying Utilities ..."
cp -R utilities/bml_over_mtd kernel_zip
cp -R utilities/erase_image kernel_zip
cp -R utilities/flash_image kernel_zip
cp -R ~/datadrive/Kernels/bml_over_mtd.sh kernel_zip
echo "Zipping package..."
cd kernel_zip
tar -cf $name.tar zImage
rm zImage
mv $finalout/kernel_zip/$name.tar ~/datadrive/Kernels/$trgt
zip -qr ../$name.zip ./
cd $finalout
echo "Signing package..."
java -jar $androidtop/out/host/linux-x86/framework/signapk.jar $secsign/testkey.x509.pem $secsign/testkey.pk8 $name.zip $name-signed.zip
rm $name.zip
echo -e "${txtgrn}Package complete:${txtrst} $finalout/$name-signed.zip"
md5sum $name-signed.zip
echo "Moving to Kernels dir"
mv $finalout/$name-signed.zip ~/datadrive/Kernels/$trgt
#****************************************************************
## Report timer:
END=$(date +%s)
ELAPSED=$((END - START))
E_MIN=$((ELAPSED / 60))
E_SEC=$((ELAPSED - E_MIN * 60))
printf "${txtgrn}Elapsed: "
[ $E_MIN != 0 ] && printf "%d min(s) " $E_MIN
printf "%d sec(s)\n ${txtrst}" $E_SEC
